// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id             Int              @id @default(autoincrement())
  name           String
  password       String
  email          String           @unique
  phone          String?          @unique
  address        String?
  role           ROLE             @default(USER)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  status         Boolean          @default(true)
  reputation     Float?
  comments       apato_comment[]
  apato          apato[]
  report_request report_request[]
}

enum ROLE {
  ADMIN
  USER
  SELLER
}

model apato {
  id           Int             @id @default(autoincrement())
  creator      user            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  title        String
  address      String
  image        String[]
  area         Float
  price        Int
  detail       String
  room_count   Int
  district     String?
  university   String?
  status       Int             @default(0)
  total_rating Float           @default(0)
  comments     apato_comment[]
  user_id      Int
  created_at   DateTime        @default(now())
  tags         apato_tags[]
}

model apato_comment {
  id             Int              @id @default(autoincrement())
  apato          apato?           @relation(fields: [apatoId], references: [id], onDelete: Cascade)
  apatoId        Int?
  user           user?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int?
  comment        String
  rating         Int
  created_at     DateTime         @default(now())
  deleted        Boolean          @default(false)
  report_request report_request[]
}

model report_request {
  id               Int           @id @default(autoincrement())
  comment          apato_comment @relation(fields: [apato_comment_id], references: [id], onDelete: Cascade)
  apato_comment_id Int
  reporter         user          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id          Int
  checked          Boolean       @default(false)
  created_at       DateTime      @default(now())
}

model tag {
  id           Int          @id @default(autoincrement())
  tag_name     String       @unique
  created_at   DateTime     @default(now())
  search_count Int?         @default(0)
  apatos       apato_tags[]
}

model apato_tags {
  apato    apato @relation(fields: [apato_id], references: [id], onDelete: Cascade)
  apato_id Int
  tag      tag   @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  tag_id   Int

  @@unique([tag_id, apato_id])
}
